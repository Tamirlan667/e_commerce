{"ast":null,"code":"import Cart from \"@/components/Cart.vue\";\nimport BaseCard from \"@/components/UI/BaseCard.vue\";\nimport { getLocationData } from \"@/utils/geoCoding\";\nimport BasePlaceholder from \"@/components/UI/BasePlaceholder.vue\";\nimport ChooseDelivery from \"@/components/ChooseDelivery.vue\";\nimport CheckoutForm from \"@/components/CheckoutForm.vue\";\nimport DeliveryLocation from \"@/components/DeliveryLocation.vue\";\nimport BaseHeading from \"@/components/UI/BaseHeading.vue\";\nimport FadeTransition from \"@/components/UI/FadeTransition.vue\";\nimport { reactive, ref } from \"@vue/reactivity\";\nimport { watch } from \"@vue/runtime-core\";\nimport { useCartStore } from \"@/store/useCartStore\";\nimport { storeToRefs } from \"pinia\";\nexport default {\n  __name: 'CheckoutPage',\n\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const cartStore = useCartStore();\n    const {\n      isProductsInCart\n    } = storeToRefs(cartStore);\n    const location = ref(null);\n    const delivery = reactive({});\n    const confirmedLocation = ref(null);\n    const isGeoApiLocationAllowed = ref(false);\n\n    const setDeliveryOption = async deliveryOption => {\n      Object.assign(delivery, deliveryOption);\n\n      if (deliveryOption.type === \"delivery\") {\n        location.value = \"\";\n        await getLocation();\n      }\n    };\n\n    const getLocation = async () => {\n      try {\n        const {\n          countryName,\n          city\n        } = await getLocationData();\n        isGeoApiLocationAllowed.value = true;\n        location.value = `${city}, ${countryName}`;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const confirmLocation = async isConfirmed => {\n      if (!isConfirmed) {\n        confirmedLocation.value = \"\";\n        return;\n      }\n\n      confirmedLocation.value = location.value;\n    };\n\n    watch(delivery, () => {\n      confirmedLocation.value = null;\n    });\n    const __returned__ = {\n      cartStore,\n      isProductsInCart,\n      location,\n      delivery,\n      confirmedLocation,\n      isGeoApiLocationAllowed,\n      setDeliveryOption,\n      getLocation,\n      confirmLocation,\n      Cart,\n      BaseCard,\n      getLocationData,\n      BasePlaceholder,\n      ChooseDelivery,\n      CheckoutForm,\n      DeliveryLocation,\n      BaseHeading,\n      FadeTransition,\n      reactive,\n      ref,\n      watch,\n      useCartStore,\n      storeToRefs\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"AAqCA,OAAOA,IAAP,MAAiB,uBAAjB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,eAAP,MAA4B,qCAA5B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,iBAA9B;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,WAAT,QAA4B,OAA5B;;;;;;;;IAEA,MAAMC,SAAS,GAAGF,YAAY,EAA9B;IACA,MAAM;MAAEG;IAAF,IAAuBF,WAAW,CAACC,SAAD,CAAxC;IAEA,MAAME,QAAQ,GAAGN,GAAG,CAAC,IAAD,CAApB;IACA,MAAMO,QAAQ,GAAGR,QAAQ,CAAC,EAAD,CAAzB;IACA,MAAMS,iBAAiB,GAAGR,GAAG,CAAC,IAAD,CAA7B;IACA,MAAMS,uBAAuB,GAAGT,GAAG,CAAC,KAAD,CAAnC;;IAEA,MAAMU,iBAAiB,GAAG,MAAOC,cAAP,IAA0B;MAClDC,MAAM,CAACC,MAAP,CAAcN,QAAd,EAAwBI,cAAxB;;MACA,IAAIA,cAAc,CAACG,IAAf,KAAwB,UAA5B,EAAwC;QACtCR,QAAQ,CAACS,KAAT,GAAiB,EAAjB;QACA,MAAMC,WAAW,EAAjB;MACD;IACF,CAND;;IAQA,MAAMA,WAAW,GAAG,YAAY;MAC9B,IAAI;QACF,MAAM;UAAEC,WAAF;UAAeC;QAAf,IAAwB,MAAM1B,eAAe,EAAnD;QAEAiB,uBAAuB,CAACM,KAAxB,GAAgC,IAAhC;QACAT,QAAQ,CAACS,KAAT,GAAkB,GAAEG,IAAK,KAAID,WAAY,EAAzC;MACD,CALD,CAKE,OAAOE,KAAP,EAAc;QACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACD;IACF,CATD;;IAWA,MAAMG,eAAe,GAAG,MAAOC,WAAP,IAAuB;MAC7C,IAAI,CAACA,WAAL,EAAkB;QAChBf,iBAAiB,CAACO,KAAlB,GAA0B,EAA1B;QACA;MACD;;MAEDP,iBAAiB,CAACO,KAAlB,GAA0BT,QAAQ,CAACS,KAAnC;IACD,CAPD;;IASAd,KAAK,CAACM,QAAD,EAAW,MAAM;MACpBC,iBAAiB,CAACO,KAAlB,GAA0B,IAA1B;IACD,CAFI,CAAL","names":["Cart","BaseCard","getLocationData","BasePlaceholder","ChooseDelivery","CheckoutForm","DeliveryLocation","BaseHeading","FadeTransition","reactive","ref","watch","useCartStore","storeToRefs","cartStore","isProductsInCart","location","delivery","confirmedLocation","isGeoApiLocationAllowed","setDeliveryOption","deliveryOption","Object","assign","type","value","getLocation","countryName","city","error","console","log","confirmLocation","isConfirmed"],"sources":["/Users/tamirlankarimov/Desktop/Vue_Project_ecommerce/e-commerce-app/src/pages/CheckoutPage.vue"],"sourcesContent":["<template>\n  <div class=\"checkout\">\n    <BaseHeading variant=\"h1\">Checkout</BaseHeading>\n\n    <BasePlaceholder v-if=\"!isProductsInCart\"\n      >Cart is empty. Nothing to render</BasePlaceholder\n    >\n\n    <div class=\"checkout__content\" v-if=\"isProductsInCart\">\n      <BaseCard>\n        <Cart :delivery=\"delivery\" />\n      </BaseCard>\n\n      <BaseCard class=\"checkout__content\">\n        <ChooseDelivery\n          @onSelectDeliveryOption=\"setDeliveryOption\"\n        ></ChooseDelivery>\n\n        <FadeTransition>\n          <DeliveryLocation\n            v-if=\"isGeoApiLocationAllowed && delivery?.type === 'delivery'\"\n            :location=\"location\"\n            @onConfirmLocationClick=\"confirmLocation\"\n          />\n        </FadeTransition>\n      </BaseCard>\n\n      <CheckoutForm\n        :delivery=\"delivery\"\n        :location=\"confirmedLocation\"\n        v-if=\"delivery\"\n      ></CheckoutForm>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport Cart from \"@/components/Cart.vue\";\nimport BaseCard from \"@/components/UI/BaseCard.vue\";\nimport { getLocationData } from \"@/utils/geoCoding\";\nimport BasePlaceholder from \"@/components/UI/BasePlaceholder.vue\";\nimport ChooseDelivery from \"@/components/ChooseDelivery.vue\";\nimport CheckoutForm from \"@/components/CheckoutForm.vue\";\nimport DeliveryLocation from \"@/components/DeliveryLocation.vue\";\nimport BaseHeading from \"@/components/UI/BaseHeading.vue\";\nimport FadeTransition from \"@/components/UI/FadeTransition.vue\";\nimport { reactive, ref } from \"@vue/reactivity\";\nimport { watch } from \"@vue/runtime-core\";\nimport { useCartStore } from \"@/store/useCartStore\";\nimport { storeToRefs } from \"pinia\";\n\nconst cartStore = useCartStore();\nconst { isProductsInCart } = storeToRefs(cartStore);\n\nconst location = ref(null);\nconst delivery = reactive({});\nconst confirmedLocation = ref(null);\nconst isGeoApiLocationAllowed = ref(false);\n\nconst setDeliveryOption = async (deliveryOption) => {\n  Object.assign(delivery, deliveryOption);\n  if (deliveryOption.type === \"delivery\") {\n    location.value = \"\";\n    await getLocation();\n  }\n};\n\nconst getLocation = async () => {\n  try {\n    const { countryName, city } = await getLocationData();\n\n    isGeoApiLocationAllowed.value = true;\n    location.value = `${city}, ${countryName}`;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst confirmLocation = async (isConfirmed) => {\n  if (!isConfirmed) {\n    confirmedLocation.value = \"\";\n    return;\n  }\n\n  confirmedLocation.value = location.value;\n};\n\nwatch(delivery, () => {\n  confirmedLocation.value = null;\n});\n</script>\n\n<style scoped>\n.checkout {\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  max-width: 934px;\n  gap: 40px;\n}\n\n.checkout__content {\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}