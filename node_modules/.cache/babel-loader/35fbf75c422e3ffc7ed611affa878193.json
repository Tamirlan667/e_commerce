{"ast":null,"code":"import { ref } from \"@vue/reactivity\";\nimport { computed, watch } from \"@vue/runtime-core\";\nexport default {\n  __name: 'CountDownTimer',\n  props: {\n    timeout: {\n      type: Number,\n      required: true\n    }\n  },\n  emits: [\"onTimerEnd\"],\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    expose();\n    const props = __props;\n    const FULL_DASH_ARRAY = 283;\n    const TIMER_COLOR = {\n      base: {\n        color: \"orange\"\n      },\n      alert: {\n        color: \"red\",\n        threshold: 2\n      }\n    };\n    const timer = ref(null);\n\n    const countDown = sec => {\n      timer.value = sec;\n      let interval = setInterval(() => {\n        timer.value--;\n\n        if (timer.value === 0) {\n          emit(\"onTimerEnd\");\n          clearInterval(interval);\n          return;\n        }\n      }, 1000);\n    };\n\n    const circleDasharray = computed(() => `${(timeFraction.value * FULL_DASH_ARRAY).toFixed(0)} 283`);\n    const timeFraction = computed(() => {\n      const rawTimeFraction = timer.value / props.timeout;\n      return rawTimeFraction - 1 / props.timeout * (1 - rawTimeFraction);\n    });\n    const remainingPathColor = computed(() => {\n      const {\n        base,\n        alert\n      } = TIMER_COLOR;\n      if (timer.value <= alert.threshold) return alert.color;\n      return base.color;\n    });\n    watch(() => props.timeout, () => {\n      countDown(props.timeout);\n    }, {\n      immediate: true\n    });\n    const __returned__ = {\n      FULL_DASH_ARRAY,\n      TIMER_COLOR,\n      emit,\n      props,\n      timer,\n      countDown,\n      circleDasharray,\n      timeFraction,\n      remainingPathColor,\n      ref,\n      computed,\n      watch\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"AA6BA,SAASA,GAAT,QAAoB,iBAApB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,mBAAhC;;;;;;;;;;;;;;;;;IACA,MAAMC,eAAe,GAAG,GAAxB;IACA,MAAMC,WAAW,GAAG;MAClBC,IAAI,EAAE;QACJC,KAAK,EAAE;MADH,CADY;MAIlBC,KAAK,EAAE;QACLD,KAAK,EAAE,KADF;QAELE,SAAS,EAAE;MAFN;IAJW,CAApB;IAkBA,MAAMC,KAAK,GAAGT,GAAG,CAAC,IAAD,CAAjB;;IAEA,MAAMU,SAAS,GAAIC,GAAD,IAAS;MACzBF,KAAK,CAACG,KAAN,GAAcD,GAAd;MACA,IAAIE,QAAQ,GAAGC,WAAW,CAAC,MAAM;QAC/BL,KAAK,CAACG,KAAN;;QAEA,IAAIH,KAAK,CAACG,KAAN,KAAgB,CAApB,EAAuB;UACrBG,IAAI,CAAC,YAAD,CAAJ;UACAC,aAAa,CAACH,QAAD,CAAb;UACA;QACD;MACF,CARyB,EAQvB,IARuB,CAA1B;IASD,CAXD;;IAaA,MAAMI,eAAe,GAAGhB,QAAQ,CAC9B,MAAO,GAAE,CAACiB,YAAY,CAACN,KAAb,GAAqBT,eAAtB,EAAuCgB,OAAvC,CAA+C,CAA/C,CAAkD,MAD7B,CAAhC;IAIA,MAAMD,YAAY,GAAGjB,QAAQ,CAAC,MAAM;MAClC,MAAMmB,eAAe,GAAGX,KAAK,CAACG,KAAN,GAAcS,KAAK,CAACC,OAA5C;MACA,OAAOF,eAAe,GAAI,IAAIC,KAAK,CAACC,OAAX,IAAuB,IAAIF,eAA3B,CAAzB;IACD,CAH4B,CAA7B;IAKA,MAAMG,kBAAkB,GAAGtB,QAAQ,CAAC,MAAM;MACxC,MAAM;QAAEI,IAAF;QAAQE;MAAR,IAAkBH,WAAxB;MAEA,IAAIK,KAAK,CAACG,KAAN,IAAeL,KAAK,CAACC,SAAzB,EAAoC,OAAOD,KAAK,CAACD,KAAb;MACpC,OAAOD,IAAI,CAACC,KAAZ;IACD,CALkC,CAAnC;IAOAJ,KAAK,CACH,MAAMmB,KAAK,CAACC,OADT,EAEH,MAAM;MACJZ,SAAS,CAACW,KAAK,CAACC,OAAP,CAAT;IACD,CAJE,EAKH;MAAEE,SAAS,EAAE;IAAb,CALG,CAAL","names":["ref","computed","watch","FULL_DASH_ARRAY","TIMER_COLOR","base","color","alert","threshold","timer","countDown","sec","value","interval","setInterval","emit","clearInterval","circleDasharray","timeFraction","toFixed","rawTimeFraction","props","timeout","remainingPathColor","immediate"],"sources":["/Users/tamirlankarimov/Desktop/Vue_Project_ecommerce/e-commerce-app/src/components/CountDownTimer.vue"],"sourcesContent":["<template>\n  <div class=\"timer\">\n    <svg\n      class=\"timer__svg\"\n      viewBox=\"0 0 100 100\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g class=\"timer__circle\">\n        <circle class=\"timer__path\" cx=\"50\" cy=\"50\" r=\"45\" />\n\n        <path\n          :stroke-dasharray=\"circleDasharray\"\n          :class=\"remainingPathColor\"\n          class=\"timer__remaining-time\"\n          d=\"\n            M 50, 50\n            m -45, 0\n            a 45,45 0 1,0 90,0\n            a 45,45 0 1,0 -90,0\n          \"\n        ></path>\n      </g>\n    </svg>\n\n    <span class=\"timer__label\">{{ timer }}</span>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from \"@vue/reactivity\";\nimport { computed, watch } from \"@vue/runtime-core\";\nconst FULL_DASH_ARRAY = 283;\nconst TIMER_COLOR = {\n  base: {\n    color: \"orange\",\n  },\n  alert: {\n    color: \"red\",\n    threshold: 2,\n  },\n};\n\nconst emit = defineEmits([\"onTimerEnd\"]);\nconst props = defineProps({\n  timeout: {\n    type: Number,\n    required: true,\n  },\n});\n\nconst timer = ref(null);\n\nconst countDown = (sec) => {\n  timer.value = sec;\n  let interval = setInterval(() => {\n    timer.value--;\n\n    if (timer.value === 0) {\n      emit(\"onTimerEnd\");\n      clearInterval(interval);\n      return;\n    }\n  }, 1000);\n};\n\nconst circleDasharray = computed(\n  () => `${(timeFraction.value * FULL_DASH_ARRAY).toFixed(0)} 283`\n);\n\nconst timeFraction = computed(() => {\n  const rawTimeFraction = timer.value / props.timeout;\n  return rawTimeFraction - (1 / props.timeout) * (1 - rawTimeFraction);\n});\n\nconst remainingPathColor = computed(() => {\n  const { base, alert } = TIMER_COLOR;\n\n  if (timer.value <= alert.threshold) return alert.color;\n  return base.color;\n});\n\nwatch(\n  () => props.timeout,\n  () => {\n    countDown(props.timeout);\n  },\n  { immediate: true }\n);\n</script>\n\n<style scoped>\n.timer {\n  position: relative;\n  width: 50px;\n  height: 50px;\n}\n\n.timer__svg {\n  transform: scaleX(-1);\n}\n\n.timer__circle {\n  fill: none;\n  stroke: none;\n}\n\n.timer__path {\n  stroke-width: 10px;\n  stroke: lightgray;\n}\n\n.timer__remaining-time {\n  stroke-width: 10px;\n  stroke-linecap: round;\n  transform: rotate(90deg);\n  transform-origin: center;\n  transition: 1s linear all;\n  fill-rule: nonzero;\n  stroke: currentColor;\n}\n\n.timer__remaining-time.orange {\n  color: orange;\n}\n\n.timer__remaining-time.red {\n  color: red;\n}\n\n.timer__label {\n  position: absolute;\n  width: 50px;\n  height: 50px;\n  top: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 20px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}